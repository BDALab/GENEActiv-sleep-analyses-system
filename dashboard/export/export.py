import os
import posixpath

from pylatex import Document, Section, Subsection, Figure, Tabular, Table, TextColor, NewPage, Itemize, Package, \
    Command, PageStyle, Head, Foot, Enumerate, Marker, Label, Ref, NewLine, StandAloneGraphic
from pylatex.utils import bold, NoEscape, escape_latex, italic

from dashboard.logic.highlevel_features.norms import NORM, sol_appropriate, sol_uncertain, sol_inappropriate, \
    awk5plus_appropriate, awk5plus_uncertain, awk5plus_inappropriate, waso_appropriate, waso_uncertain, \
    waso_inappropriate, se_appropriate, se_uncertain, se_inappropriate
from dashboard.models import Subject, SleepNight, SleepDiaryDay
from settings import STATIC_ROOT


class Export:
    def __init__(self, subject, export_user):
        if not isinstance(subject, Subject):
            raise Exception('Subject must be instance of models.Subject')
        self.subject = subject
        self.figures = {}

        geometry_options = {"tmargin": "2.5cm", "lmargin": "2.5cm", "rmargin": "2.5cm", "bmargin": "2.5cm"}
        self.doc = Document(geometry_options=geometry_options)
        self.doc.packages.append(Package('hyperref'))
        self.marker_overall = Marker('Overallstatistics', prefix='sec')
        self.marker_night_by_night = Marker('Nightbynight', prefix='sec')
        self.marker_colors = Marker('Coloursbasedonnormativedata', prefix='subsec')
        self.marker_norm_table = Marker('norms', prefix='tab')

        self._set_interreg_header()
        self._set_title()
        self._export_base_information(export_user)
        self._export_explanation()

    def prepare_export_folder(self):
        if not os.path.exists(self.subject.export_path):
            os.makedirs(self.subject.export_path)

    def export_figure(self, fig, name, obj):
        path = os.path.join(f'{self.subject.export_path}', f'{name}.pdf')
        fig.write_image(path)
        self.figures[obj] = path

    def export_sleep_nights(self, sleep_nights):
        self._export_overall_statistics(sleep_nights)
        self.doc.append(NewPage())
        self._export_night_by_night(sleep_nights)

    def export_to_pdf(self):
        self.doc.generate_pdf(self.subject.export_name, clean_tex=False)

    def export_to_pdf_and_cleanup(self):
        self.doc.generate_pdf(self.subject.export_name, clean_tex=True)
        for obj in self.figures.values():
            os.remove(obj)

    def _export_night_by_night(self, datas):
        with self.doc.create(Section('Night by night information')):
            self.doc.append(Label(self.marker_night_by_night))
            for data in datas:
                if isinstance(data, SleepNight):
                    with self.doc.create(Subsection(f'{data.diary_day.date}')):
                        fig_path = self.figures[data]
                        self._export_sleep_plot(fig_path)
                        self._export_sleep_statistics(data)
                        self.doc.append(NewPage())
                if isinstance(data, SleepDiaryDay):
                    with self.doc.create(Subsection(f'{data.date}')):
                        self._export_sleep_statistics(data)
                        self.doc.append(NewPage())

    def _set_title(self):
        self.doc.preamble.append(Command('title', 'Sleep Quality Report'))
        self.doc.preamble.append(Command('author', 'generated by the Intelligent Sleep Monitoring Tool'))
        self.doc.append(NoEscape(r'\maketitle\thispagestyle{header}'))

    def _set_interreg_header(self):
        header = PageStyle("header")
        # Create left footer
        with header.create(Foot("L")):
            header.append('The Intelligent Sleep Monitoring Tool was supported by European Regional Development Fund '
                          'no. CE1581 (Interreg niCE-life - Development of an integrated concept for the deployment '
                          'of innovative technologies and services allowing independent living of frail elderly) '
                          'of the European Union.')
        with header.create(Head("R")):
            eu_logo_path = os.path.join(STATIC_ROOT, 'dashboard', 'images', 'logo.png')
            eu_logo_path_unix = eu_logo_path.replace(os.sep, posixpath.sep)
            header.append(StandAloneGraphic(eu_logo_path_unix, 'width=3.5cm'))
        self.doc.preamble.append(header)
        self.doc.change_document_style("header")

    def _export_explanation(self):
        with self.doc.create(Section("Explanation and legend")):
            self.doc.append('This report does not substitute a regular examination provided in a sleep laboratory '
                            '(utilising the polysomnography). The following results must be considered indicative '
                            'and should be further confirmed and consulted with an expert in the field '
                            '(e.g. with a neurologist). ')
            self.doc.append(NewLine())
            self.doc.append('The report has two sections, overall statistics (see Section')
            self._make_ref(self.marker_overall)
            self.doc.append(') and night by night results (see Section')
            self._make_ref(self.marker_night_by_night)
            self.doc.append('). Explanations and a legend are given in Section')
            self._make_ref(self.marker_colors)
            self.doc.append('.')
            with self.doc.create(Subsection('Colours based on normative data')):
                self.doc.append('Some of the metrics have normative values. '
                                'Those metrics will be coloured based on a deviation from a normative value:')
                with self.doc.create(Itemize()) as itemize:
                    itemize.add_item(TextColor("green", 'Appropriate -- Value of a parameter is in a norm. '
                                                        'No issue has been identified.'))
                    itemize.add_item(TextColor("orange", 'Uncertain -- According to the normative data, '
                                                         'it is not possible to distinguish, '
                                                         'whether the value shows a probable problem, or not. '
                                                         'It falls in the uncertain zone of the norm.'))
                    itemize.add_item(TextColor("red", 'Inappropriate -- Value is significantly deviates from a norm. '
                                                      'There may be a possible problem with sleep.'))
            with self.doc.create(Subsection('Source of the normative data')):
                self.doc.append('The normative data were taken from the ')
                self.doc.append(italic('National Sleep Foundation\'s sleep quality recommendations: first report'))
                self.doc.append(', that is accessible via ')
                self.doc.append(self._hyperlink("https://doi.org/10.1016/j.sleh.2016.11.006",
                                                "doi:10.1016/j.sleh.2016.11.006"))
                self.doc.append('. ')
                self.doc.append(f'For the age of {self.subject.age} years, the normative data are reported in Table')
                self._make_ref(self.marker_norm_table)
                self.doc.append('.')
                with self.doc.create(Table(position="htb")) as table:
                    table.add_caption('Normative data')
                    with self.doc.create(Tabular('llll')) as tabular:
                        tabular.add_hline()
                        tabular.add_hline()
                        tabular.add_row(('', bold('Appropriate'), bold('Uncertain'), bold('Inappropriate')))
                        tabular.add_hline()
                        tabular.add_row((bold('Sleep onset latency'), sol_appropriate(),
                                         sol_uncertain(self.subject.age), sol_inappropriate(self.subject.age)))
                        tabular.add_row((bold('Awakenings >5 minutes'), awk5plus_appropriate(self.subject.age),
                                         awk5plus_uncertain(self.subject.age),
                                         awk5plus_inappropriate(self.subject.age)))
                        tabular.add_row((bold('Wake after sleep onset'), waso_appropriate(self.subject.age),
                                         waso_uncertain(self.subject.age), waso_inappropriate(self.subject.age)))
                        tabular.add_row((bold('Sleep efficiency'), se_appropriate(), se_uncertain(self.subject.age),
                                         se_inappropriate(self.subject.age)))
                        tabular.add_hline()
                        tabular.add_hline()
                    table.append(Label(self.marker_norm_table))
                    table.append(NoEscape(r'\centering'))
        with self.doc.create(Subsection('Sleep plots')):
            self.doc.append('Every night contains results of actigraphy displayed in a sleep plot. '
                            'Those plots are exports of the interactive plots, that you can find on our page. '
                            'The sleep is marked with light blue colour, and wake with white one. '
                            'For better interactive visualisation, visit our page.')
        with self.doc.create(Subsection('Overall results computation')):
            self.doc.append('For easier interpretation, we summarised results for the parameters, '
                            'that have normative values. These overall results were computed as follow:')
            with self.doc.create(Enumerate()) as enum:
                enum.add_item(NoEscape('results were represented as numbers, where 1 represents Appropriate, '
                                       '0 represents Uncertain and $-1$ represents Inappropriate value,'))
                enum.add_item('the average value of the parameter was calculated '
                              '(e.g. 3 appropriate sleep onset latencies and 1 uncertain will result into '
                              '(1+1+1+0)/4 = 0.75),')
                enum.add_item('the average value was rounded and again interpreted '
                              '(e.g. the previous result of the average sleep onset latency 0.75 was rounded to 1 and '
                              'consequently interpreted as appropriate; the value is given in green, '
                              'i.e. based on the normative data, the average sleep onset latency is appropriate).')
            self.doc.append('To get the results in a broader context, '
                            'we recommend checking the nigh by night results as well.')

    def _make_ref(self, marker):
        self.doc.append(NoEscape('~'))
        self.doc.append(Ref(marker))

    def _export_base_information(self, export_user):
        with self.doc.create(Section('Basic information')):
            with self.doc.create(Table(position="htb")):
                with self.doc.create(Tabular('ll')) as tabular:
                    tabular.add_row((bold('Code:'), self.subject.code))
                    tabular.add_row((bold('Age:'), self.subject.age))
                    tabular.add_row((bold('Exported by:'), export_user))

    @staticmethod
    def _hyperlink(url, text):
        text = escape_latex(text)
        return NoEscape(r'\href{' + url + '}{' + text + '}')

    def _export_overall_statistics(self, datas):
        with self.doc.create(Section('Overall statistics')):
            self.doc.append(Label(self.marker_overall))
            night = True
            if isinstance(datas.first(), SleepDiaryDay):
                self.doc.append(TextColor("red", 'Warning: Actigraphy data were not provided. '
                                                 'Therefore only Diary column is relevant!'))
                night = False
            sol = 0
            waso = 0
            awk5plus = 0
            se = 0
            sol_d = 0
            waso_d = 0
            awk5plus_d = 0
            se_d = 0
            for data in datas:
                if isinstance(data, SleepNight):
                    sol += int(data.sol_norm)
                    waso += int(data.waso_norm)
                    awk5plus += int(data.awk5plus_norm)
                    se += int(data.se_norm)
                    sol_d += int(data.diary_day.sol_norm)
                    waso_d += int(data.diary_day.waso_norm)
                    awk5plus_d += int(data.diary_day.awk5plus_norm)
                    se_d += int(data.diary_day.se_norm)
                elif isinstance(data, SleepDiaryDay):
                    sol_d += int(data.sol_norm)
                    waso_d += int(data.waso_norm)
                    awk5plus_d += int(data.awk5plus_norm)
                    se_d += int(data.se_norm)
            sol = self._average(datas, sol)
            waso = self._average(datas, waso)
            awk5plus = self._average(datas, awk5plus)
            se = self._average(datas, se)
            sol_d = self._average(datas, sol_d)
            waso_d = self._average(datas, waso_d)
            awk5plus_d = self._average(datas, awk5plus_d)
            se_d = self._average(datas, se_d)
            with self.doc.create(Table(position="!h")) as table:
                with self.doc.create(Tabular('llll')) as tabular:
                    tabular.add_row(('', bold('Actigraph'), bold('Diary'), bold('Explanation')))
                    tabular.add_hline()
                    tabular.add_hline()
                    tabular.add_row((bold('Sleep onset latency'),
                                     self._get_colored_from_int(f'{sol:.2f}', round(sol)) if night else "",
                                     self._get_colored_from_int(f'{sol_d:.2f}', round(sol_d)),
                                     'Time between try to go sleep and sleep onset'))
                    tabular.add_row((bold('Wake after sleep onset'),
                                     self._get_colored_from_int(f'{waso:.2f}', round(waso)) if night else "",
                                     self._get_colored_from_int(f'{waso_d:.2f}', round(waso_d)),
                                     'Sum of wake ups between sleep onset and offset'))
                    tabular.add_row((bold('Awakenings >5 minutes'),
                                     self._get_colored_from_int(f'{awk5plus:.2f}', round(awk5plus)) if night else "",
                                     self._get_colored_from_int(f'{awk5plus_d:.2f}', round(awk5plus_d)),
                                     'Number of awakenings longer than 5 minutes')),
                    tabular.add_row((bold('Sleep efficiency'),
                                     self._get_colored_from_int(f'{se:.2f}', round(se)) if night else "",
                                     self._get_colored_from_int(f'{se_d:.2f}', round(se_d)),
                                     'Ratio of total sleep time and time in bed')),

    @staticmethod
    def _average(sleep_nights, sol):
        sol = sol / len(sleep_nights)
        return sol

    def _export_sleep_statistics(self, data):
        if isinstance(data, SleepNight):
            night = True
        elif isinstance(data, SleepDiaryDay):
            night = False
            self.doc.append(TextColor("red", 'Warning: Actigraphy data were not provided. '
                                             'Therefore only Diary column is relevant!'))
        else:
            return
        with self.doc.create(Table(position="!h")) as table:
            with self.doc.create(Tabular('llll')) as tabular:
                tabular.add_row(('', bold('Actigraph'), bold('Diary'), bold('Explanation')))
                tabular.add_hline()
                tabular.add_hline()
                tabular.add_row((bold('Try to go sleep time'),
                                 '',
                                 f'{data.diary_day.t1.time() if night else data.t1.time()}',
                                 'Time when you try to go sleep'))
                tabular.add_row((bold('Sleep onset'),
                                 f'{data.sleep_onset.time() if night else ""}',
                                 f'{data.diary_day.t2.time() if night else data.t2.time()}',
                                 'Time when you fell asleep'))
                tabular.add_row((bold('Sleep offset'),
                                 f'{data.sleep_end.time() if night else ""}',
                                 f'{data.diary_day.t3.time() if night else data.t3.time()}',
                                 'Time when you woke up'))
                tabular.add_row((bold('Get up time'),
                                 '',
                                 f'{data.diary_day.t4.time() if night else data.t4.time()}',
                                 'Time, when you get up from bed'))
                tabular.add_row((bold('Time in bed'),
                                 '',
                                 f'{data.diary_day.convert(data.diary_day.tib) if night else data.convert(data.tib)}',
                                 'Time between try to go sleep and get up from bed'))
                tabular.add_row((bold('Sleep onset latency'),
                                 self._get_colored(f'{data.convert(data.sol) if night else ""}',
                                                   data.sol_norm if night else "empty"),
                                 self._get_colored(
                                     f'{data.diary_day.convert(data.diary_day.sol) if night else data.convert(data.sol)}',
                                     data.diary_day.sol_norm if night else data.sol_norm),
                                 'Time between try to go sleep and sleep onset'))
                tabular.add_row((bold('Wake after sleep onset'),
                                 self._get_colored(f'{data.convert(data.waso) if night else ""}',
                                                   data.waso_norm if night else "empty"),
                                 self._get_colored(
                                     f'{data.diary_day.convert(data.diary_day.waso) if night else data.convert(data.waso)}',
                                     data.diary_day.waso_norm if night else data.waso_norm),
                                 'Sum of wake ups between sleep onset and offset'))
                tabular.add_row((bold('Wake after sleep offset'),
                                 f'{data.convert(data.wasf) if night else ""}',
                                 f'{data.diary_day.convert(data.diary_day.wasf) if night else data.convert(data.wasf)}',
                                 'Time between sleep offset and get up from bed'))
                tabular.add_row((bold('Total sleep time'),
                                 f'{data.convert(data.tst) if night else ""}',
                                 f'{data.diary_day.convert(data.diary_day.tst) if night else data.convert(data.tst)}',
                                 'Total time of your sleep during night'))
                tabular.add_row((bold('Wake bouts'),
                                 f'{data.wb if night else ""}',
                                 f'{data.diary_day.wb if night else data.wb}',
                                 'Number of awakenings during night'))
                tabular.add_row((bold('Awakenings >5 minutes'),
                                 self._get_colored(f'{data.awk5plus if night else ""}',
                                                   data.awk5plus_norm if night else "empty"),
                                 self._get_colored(f'{data.diary_day.awk5plus if night else data.awk5plus}',
                                                   data.diary_day.awk5plus_norm if night else data.awk5plus_norm),
                                 'Number of awakenings longer than 5 minutes')),
                tabular.add_row((bold('Sleep efficiency'),
                                 self._get_colored(f'{data.se:.1f}%' if night else "",
                                                   data.se_norm if night else "empty"),
                                 self._get_colored(f'{data.diary_day.se if night else data.se:.1f}%',
                                                   data.diary_day.se_norm if night else data.se_norm),
                                 'Ratio of total sleep time and time in bed')),
                tabular.add_row((bold('Sleep fragmentation'),
                                 f'{data.sf:.2f}' if night else "",
                                 f'{data.diary_day.sf if night else data.sf:.2f}',
                                 'Ratio of wake bouts and total sleep time'))

    def _export_sleep_plot(self, fig_path):
        with self.doc.create(Figure(position='!h')) as figure:
            figure.add_image(fig_path, width='500px')

    @staticmethod
    def _get_colored(text, norm):
        if norm == NORM.APPROPRIATE:
            return TextColor("green", text)
        elif norm == NORM.UNCERTAIN:
            return TextColor("orange", text)
        elif norm == NORM.INAPPROPRIATE:
            return TextColor("red", text)
        else:
            return text

    def _get_colored_from_int(self, text, number):
        norm = NORM(number)
        return self._get_colored(text, norm)
